import * as fs from "fs";
import { App, Stack } from "aws-cdk-lib";
import { Template } from "aws-cdk-lib/assertions";
import { HttpApi } from "aws-cdk-lib/aws-apigatewayv2";
import * as acm from "aws-cdk-lib/aws-certificatemanager";
import { WafHttpApi } from "../src/index";

describe("CloudFront Domain Configuration", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;
  let consoleSpy: jest.SpyInstance;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
    // Suppress console warnings for cleaner test output (warnings are tested separately)
    consoleSpy = jest.spyOn(console, "warn").mockImplementation();
  });

  afterEach(() => {
    consoleSpy.mockRestore();
  });

  test("CloudFront distribution without custom domain", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify distribution exists
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);

    // Verify no Aliases property is set (undefined properties are omitted from CloudFormation)
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    expect(distributionConfig.Aliases).toBeUndefined();
    expect(distributionConfig.ViewerCertificate).toBeUndefined();

    // Verify properties are undefined when not applicable
    expect(wafApi.customDomain).toBeUndefined();
    expect(wafApi.certificate).toBeUndefined();
  });

  test("CloudFront distribution with custom domain only (auto-certificate)", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });

    const template = Template.fromStack(stack);

    // Verify distribution has domain alias
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    expect(distributionConfig.Aliases).toEqual(["api.example.com"]);
    expect(distributionConfig.ViewerCertificate).toBeDefined();
    expect(distributionConfig.ViewerCertificate.AcmCertificateArn.Ref).toMatch(
      /TestWafApiAutoGeneratedCert/,
    );

    // Verify ACM certificate is created
    template.resourceCountIs("AWS::CertificateManager::Certificate", 1);
    template.hasResourceProperties("AWS::CertificateManager::Certificate", {
      DomainName: "api.example.com",
      ValidationMethod: "DNS",
    });

    // Verify properties are set when domain is provided
    expect(wafApi.customDomain).toBe("api.example.com");
    expect(wafApi.certificate).toBeDefined();
  });

  test("CloudFront distribution with custom domain and provided certificate", () => {
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );

    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
      certificate,
    });

    const template = Template.fromStack(stack);

    // Verify distribution has domain alias and uses provided certificate
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    expect(distributionConfig.Aliases).toEqual(["api.example.com"]);
    expect(distributionConfig.ViewerCertificate).toBeDefined();
    expect(distributionConfig.ViewerCertificate.AcmCertificateArn).toBe(
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );

    // Verify no auto-generated certificate is created
    template.resourceCountIs("AWS::CertificateManager::Certificate", 0);

    // Verify properties are set when domain and certificate are provided
    expect(wafApi.customDomain).toBe("api.example.com");
    expect(wafApi.certificate).toBe(certificate);
  });

  test("CloudFront distribution with certificate only (should ignore certificate)", () => {
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );

    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      certificate, // Certificate provided without domain
    });

    const template = Template.fromStack(stack);

    // Verify distribution behaves like no custom domain case
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    expect(distributionConfig.Aliases).toBeUndefined();
    expect(distributionConfig.ViewerCertificate).toBeUndefined();

    // Verify no certificate is created
    template.resourceCountIs("AWS::CertificateManager::Certificate", 0);

    // Verify properties are undefined when certificate is provided without domain
    expect(wafApi.customDomain).toBeUndefined();
    expect(wafApi.certificate).toBeUndefined();
  });
});

describe("WAF Configuration", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should create WebACL with default managed rules", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify WebACL is created
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);

    // Verify WebACL has correct scope and default action
    template.hasResourceProperties("AWS::WAFv2::WebACL", {
      Scope: "CLOUDFRONT",
      DefaultAction: { Allow: {} },
      VisibilityConfig: {
        CloudWatchMetricsEnabled: true,
        MetricName: "TestWafApi-Waf",
        SampledRequestsEnabled: true,
      },
    });

    // Verify default managed rules are applied
    const webAcls = template.findResources("AWS::WAFv2::WebACL");
    const webAclRules = Object.values(webAcls)[0].Properties.Rules;

    expect(webAclRules).toHaveLength(2);
    expect(webAclRules[0].Statement.ManagedRuleGroupStatement.VendorName).toBe(
      "AWS",
    );
    expect(webAclRules[1].Statement.ManagedRuleGroupStatement.VendorName).toBe(
      "AWS",
    );
  });

  test("should create WebACL with custom rules when provided", () => {
    const customRules = [
      {
        name: "CustomRateLimitRule",
        priority: 10,
        statement: {
          rateBasedStatement: {
            limit: 1000,
            aggregateKeyType: "IP",
          },
        },
        action: { block: {} },
        visibilityConfig: {
          cloudWatchMetricsEnabled: true,
          metricName: "CustomRateLimit",
          sampledRequestsEnabled: true,
        },
      },
    ];

    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      wafRules: customRules,
    });

    const template = Template.fromStack(stack);

    // Verify WebACL uses custom rules
    const webAcls = template.findResources("AWS::WAFv2::WebACL");
    const webAclRules = Object.values(webAcls)[0].Properties.Rules;

    expect(webAclRules).toHaveLength(1);
    expect(webAclRules[0].Name).toBe("CustomRateLimitRule");
    expect(webAclRules[0].Priority).toBe(10);
  });

  test("should associate WebACL with CloudFront distribution", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify CloudFront distribution references WebACL
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;

    expect(distributionConfig.WebACLId).toBeDefined();
    // WebACLId can be either a direct Ref or an object with Fn::GetAtt
    if (distributionConfig.WebACLId.Ref) {
      expect(distributionConfig.WebACLId.Ref).toMatch(/TestWafApiWebAcl/);
    } else if (distributionConfig.WebACLId["Fn::GetAtt"]) {
      expect(distributionConfig.WebACLId["Fn::GetAtt"][0]).toMatch(
        /TestWafApiWebAcl/,
      );
    } else {
      // It might be a direct string reference
      expect(distributionConfig.WebACLId).toMatch(/TestWafApiWebAcl/);
    }
  });
});

describe("CloudFront Origin Configuration", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should configure origin with correct HTTP API domain", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify origin configuration
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    const origin = distributionConfig.Origins[0];

    // The HTTP API URL structure is more complex than expected, so let's just verify the structure exists
    expect(origin.DomainName["Fn::Select"]).toBeDefined();
    expect(origin.DomainName["Fn::Select"][0]).toBe(2);
    expect(origin.DomainName["Fn::Select"][1]["Fn::Split"]).toBeDefined();
    expect(origin.CustomOriginConfig.OriginProtocolPolicy).toBe("https-only");
  });

  test("should add secret header to origin requests", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify custom header is added
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    const origin = distributionConfig.Origins[0];

    expect(origin.OriginCustomHeaders).toHaveLength(1);
    expect(origin.OriginCustomHeaders[0].HeaderName).toBe("X-Origin-Verify");
    expect(origin.OriginCustomHeaders[0].HeaderValue).toBeDefined();
    expect(typeof origin.OriginCustomHeaders[0].HeaderValue).toBe("string");
    expect(origin.OriginCustomHeaders[0].HeaderValue).toHaveLength(32); // 16 bytes as hex = 32 chars
  });

  test("should generate unique secret header values for different instances", () => {
    const wafApi1 = new WafHttpApi(stack, "TestWafApi1", { httpApi });
    const wafApi2 = new WafHttpApi(stack, "TestWafApi2", {
      httpApi: new HttpApi(stack, "TestApi2"),
    });

    expect(wafApi1.secretHeaderValue).not.toBe(wafApi2.secretHeaderValue);
    expect(wafApi1.secretHeaderValue).toHaveLength(32);
    expect(wafApi2.secretHeaderValue).toHaveLength(32);
    expect(/^[a-f0-9]{32}$/.test(wafApi1.secretHeaderValue)).toBe(true);
    expect(/^[a-f0-9]{32}$/.test(wafApi2.secretHeaderValue)).toBe(true);
  });

  test("should configure CloudFront behavior policies correctly", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify behavior configuration
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distributionConfig =
      Object.values(distributions)[0].Properties.DistributionConfig;
    const defaultBehavior = distributionConfig.DefaultCacheBehavior;

    expect(defaultBehavior.ViewerProtocolPolicy).toBe("redirect-to-https");
    expect(defaultBehavior.AllowedMethods).toEqual(
      expect.arrayContaining([
        "DELETE",
        "GET",
        "HEAD",
        "OPTIONS",
        "PATCH",
        "POST",
        "PUT",
      ]),
    );
    expect(defaultBehavior.AllowedMethods).toHaveLength(7);
    expect(defaultBehavior.CachePolicyId).toBe(
      "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
    ); // CACHING_DISABLED
    expect(defaultBehavior.OriginRequestPolicyId).toBe(
      "b689b0a8-53d0-40ab-baf2-68738e2966ac",
    ); // ALL_VIEWER_EXCEPT_HOST_HEADER
  });
});

describe("Error Handling and Validation", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  describe("Domain Validation", () => {
    test("should throw descriptive error for invalid domain format", () => {
      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: "invalid..domain",
        });
      }).toThrow(/❌ Invalid domain format/);
    });

    test("should throw descriptive error for empty domain", () => {
      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: "",
        });
      }).toThrow(/❌ Invalid domain format: Domain must be a non-empty string/);
    });

    test("should throw descriptive error for domain exceeding length limit", () => {
      const longDomain = "a".repeat(250) + ".com";
      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: longDomain,
        });
      }).toThrow(
        /❌ Invalid domain format: Domain name exceeds maximum length/,
      );
    });

    test("should throw descriptive error for multiple wildcards", () => {
      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: "*.*.example.com",
        });
      }).toThrow(
        /❌ Invalid wildcard domain format.*contains multiple wildcards/,
      );
    });

    test("should throw descriptive error for non-string domain", () => {
      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: null as any,
        });
      }).toThrow(/❌ Invalid domain format: Domain must be a non-empty string/);
    });
  });

  describe("Certificate Validation", () => {
    test("should throw descriptive error for certificate in wrong region", () => {
      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        "TestCert",
        "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012",
      );

      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: "api.example.com",
          certificate,
        });
      }).toThrow(
        /❌ Certificate region validation failed.*must be in us-east-1 region/,
      );
    });

    test("should throw descriptive error for invalid certificate ARN format", () => {
      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        "TestCert",
        "invalid-arn-format",
      );

      expect(() => {
        new WafHttpApi(stack, "TestWafApi", {
          httpApi,
          domain: "api.example.com",
          certificate,
        });
      }).toThrow(
        /❌ Certificate validation failed: Invalid certificate ARN format/,
      );
    });
  });

  describe("Certificate Generation Error Handling", () => {
    test("certificate generation error handling is implemented in constructor", () => {
      // This test verifies that the error handling logic exists in the constructor
      // The actual certificate generation error handling is tested through the try-catch
      // block in the constructor, which wraps certificate creation with descriptive errors

      // We can verify the error handling structure by reading the source code
      // and confirming that proper error handling exists for certificate generation
      const sourceCode = fs.readFileSync("src/index.ts", "utf8");

      // Verify that certificate generation is wrapped in try-catch
      expect(sourceCode).toContain("try {");
      expect(sourceCode).toContain("catch (error)");
      expect(sourceCode).toContain("Failed to create SSL certificate");
      expect(sourceCode).toContain("🔧 Troubleshooting steps:");
      expect(sourceCode).toContain(
        "💡 Alternative: Provide an existing certificate",
      );
    });
  });

  describe("Warning Messages", () => {
    test("should log enhanced warning when certificate provided without domain", () => {
      const consoleSpy = jest.spyOn(console, "warn").mockImplementation();

      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        "TestCert",
        "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
      );

      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        certificate,
      });

      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining(
          "⚠️  WafHttpApi Warning: Certificate provided without domain",
        ),
      );
      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining(
          "🔧 Solution: Choose one of the following options",
        ),
      );

      consoleSpy.mockRestore();
    });

    test("should log compatibility warning for certificate domain validation", () => {
      const consoleSpy = jest.spyOn(console, "warn").mockImplementation();

      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        "TestCert",
        "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
      );

      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.com",
        certificate,
      });

      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining(
          "⚠️  Certificate domain compatibility: Full validation requires runtime AWS API access",
        ),
      );
      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining("🔧 Verification steps"),
      );

      consoleSpy.mockRestore();
    });

    test("should log wildcard domain compatibility warning", () => {
      const consoleSpy = jest.spyOn(console, "warn").mockImplementation();

      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        "TestCert",
        "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
      );

      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "*.example.com",
        certificate,
      });

      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining(
          "⚠️  Certificate domain compatibility: Wildcard domain validation is limited at synthesis time",
        ),
      );
      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining("🔧 Manual verification"),
      );

      consoleSpy.mockRestore();
    });
  });
});
describe("Domain Format Validation Edge Cases", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should accept valid apex domain", () => {
    expect(() => {
      const wafApi = new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "example.com",
      });
      expect(wafApi.customDomain).toBe("example.com");
    }).not.toThrow();
  });

  test("should accept valid subdomain", () => {
    expect(() => {
      const wafApi = new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.com",
      });
      expect(wafApi.customDomain).toBe("api.example.com");
    }).not.toThrow();
  });

  test("should accept valid deep subdomain", () => {
    expect(() => {
      const wafApi = new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "v1.api.example.com",
      });
      expect(wafApi.customDomain).toBe("v1.api.example.com");
    }).not.toThrow();
  });

  test("should accept valid wildcard domain", () => {
    expect(() => {
      const wafApi = new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "*.example.com",
      });
      expect(wafApi.customDomain).toBe("*.example.com");
    }).not.toThrow();
  });

  test("should accept valid wildcard subdomain", () => {
    expect(() => {
      const wafApi = new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "*.api.example.com",
      });
      expect(wafApi.customDomain).toBe("*.api.example.com");
    }).not.toThrow();
  });

  test("should reject domain with invalid characters", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api_example.com",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain starting with hyphen", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "-api.example.com",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain ending with hyphen", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api-.example.com",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain with consecutive dots", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api..example.com",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain with single character TLD", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.c",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain starting with dot", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: ".example.com",
      });
    }).toThrow(/❌ Invalid domain format/);
  });

  test("should reject domain ending with dot", () => {
    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "example.com.",
      });
    }).toThrow(/❌ Invalid domain format/);
  });
});

describe("Certificate ARN Validation Edge Cases", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should accept valid certificate ARN in us-east-1", () => {
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );

    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.com",
        certificate,
      });
    }).not.toThrow();
  });

  test("should reject certificate ARN with missing parts", () => {
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm",
    );

    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.com",
        certificate,
      });
    }).toThrow(
      /❌ Certificate validation failed: Invalid certificate ARN format/,
    );
  });

  test("should reject certificate ARN in different regions", () => {
    const regions = ["us-west-1", "us-west-2", "eu-west-1", "ap-southeast-1"];

    regions.forEach((region) => {
      const certificate = acm.Certificate.fromCertificateArn(
        stack,
        `TestCert${region}`,
        `arn:aws:acm:${region}:123456789012:certificate/12345678-1234-1234-1234-123456789012`,
      );

      expect(() => {
        new WafHttpApi(stack, `TestWafApi${region}`, {
          httpApi,
          domain: "api.example.com",
          certificate,
        });
      }).toThrow(
        /❌ Certificate region validation failed.*must be in us-east-1 region/,
      );
    });
  });

  test("should reject malformed certificate ARN", () => {
    // Test with a clearly malformed ARN that should trigger our validation
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm:us-east-1:123456789012", // Missing certificate part
    );

    expect(() => {
      new WafHttpApi(stack, "TestWafApi", {
        httpApi,
        domain: "api.example.com",
        certificate,
      });
    }).toThrow(); // CDK or our validation should throw an error for malformed ARNs
  });
});

describe("Static Properties and Constants", () => {
  test("should expose correct secret header name constant", () => {
    expect(WafHttpApi.SECRET_HEADER_NAME).toBe("X-Origin-Verify");
  });

  test("should maintain consistent secret header name across instances", () => {
    const app = new App();
    const stack = new Stack(app, "TestStack");
    const httpApi = new HttpApi(stack, "TestApi");

    new WafHttpApi(stack, "TestWafApi1", { httpApi });
    new WafHttpApi(stack, "TestWafApi2", {
      httpApi: new HttpApi(stack, "TestApi2"),
    });

    // Both instances should use the same header name
    expect(WafHttpApi.SECRET_HEADER_NAME).toBe("X-Origin-Verify");

    // Verify the header name is used consistently in CloudFormation
    const template = Template.fromStack(stack);
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );

    Object.values(distributions).forEach((distribution: any) => {
      const origin = distribution.Properties.DistributionConfig.Origins[0];
      expect(origin.OriginCustomHeaders[0].HeaderName).toBe("X-Origin-Verify");
    });
  });
});

describe("Property Exposure and Access", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should expose distribution property", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", { httpApi });

    expect(wafApi.distribution).toBeDefined();
    expect(wafApi.distribution.distributionDomainName).toBeDefined();
    expect(wafApi.distribution.distributionId).toBeDefined();
  });

  test("should expose secretHeaderValue property", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", { httpApi });

    expect(wafApi.secretHeaderValue).toBeDefined();
    expect(typeof wafApi.secretHeaderValue).toBe("string");
    expect(wafApi.secretHeaderValue).toHaveLength(32);
    expect(/^[a-f0-9]{32}$/.test(wafApi.secretHeaderValue)).toBe(true);
  });

  test("should expose certificate property when auto-generated", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });

    expect(wafApi.certificate).toBeDefined();
    expect(wafApi.certificate!.certificateArn).toBeDefined();
  });

  test("should expose certificate property when provided", () => {
    const certificate = acm.Certificate.fromCertificateArn(
      stack,
      "TestCert",
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );

    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
      certificate,
    });

    expect(wafApi.certificate).toBe(certificate);
    expect(wafApi.certificate!.certificateArn).toBe(
      "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
    );
  });

  test("should expose customDomain property when domain is provided", () => {
    const domain = "api.example.com";
    const wafApi = new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain,
    });

    expect(wafApi.customDomain).toBe(domain);
  });

  test("should have undefined properties when not applicable", () => {
    const wafApi = new WafHttpApi(stack, "TestWafApi", { httpApi });

    expect(wafApi.certificate).toBeUndefined();
    expect(wafApi.customDomain).toBeUndefined();
  });
});

describe("CloudFormation Template Structure", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should generate valid CloudFormation template without custom domain", () => {
    new WafHttpApi(stack, "TestWafApi", { httpApi });
    const template = Template.fromStack(stack);

    // Verify required resources exist
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    template.resourceCountIs("AWS::CertificateManager::Certificate", 0);

    // Verify template structure is valid
    const templateJson = template.toJSON();
    expect(templateJson.Resources).toBeDefined();
    expect(Object.keys(templateJson.Resources)).toHaveLength(4); // WebACL + Distribution + HttpApi + DefaultStage
  });

  test("should generate valid CloudFormation template with custom domain", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });
    const template = Template.fromStack(stack);

    // Verify required resources exist
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    template.resourceCountIs("AWS::CertificateManager::Certificate", 1);

    // Verify template structure is valid
    const templateJson = template.toJSON();
    expect(templateJson.Resources).toBeDefined();
    expect(Object.keys(templateJson.Resources)).toHaveLength(5); // WebACL + Distribution + Certificate + HttpApi + DefaultStage
  });

  test("should maintain resource naming consistency", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });
    const template = Template.fromStack(stack);

    const resources = template.toJSON().Resources;
    const resourceNames = Object.keys(resources);

    // Verify resource naming patterns
    expect(
      resourceNames.some((name) => name.includes("TestWafApiWebAcl")),
    ).toBe(true);
    expect(
      resourceNames.some((name) => name.includes("TestWafApiApiDistribution")),
    ).toBe(true);
    expect(
      resourceNames.some((name) =>
        name.includes("TestWafApiAutoGeneratedCert"),
      ),
    ).toBe(true);
  });

  test("should have correct resource dependencies", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });
    const template = Template.fromStack(stack);

    // Verify CloudFront distribution references WebACL
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distribution = Object.values(distributions)[0] as any;

    expect(distribution.Properties.DistributionConfig.WebACLId).toBeDefined();
    expect(
      distribution.Properties.DistributionConfig.ViewerCertificate,
    ).toBeDefined();
    expect(distribution.Properties.DistributionConfig.Aliases).toEqual([
      "api.example.com",
    ]);
  });
});
