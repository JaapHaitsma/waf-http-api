import { App, Stack } from "aws-cdk-lib";
import { Template } from "aws-cdk-lib/assertions";
import { HttpApi } from "aws-cdk-lib/aws-apigatewayv2";
import * as route53 from "aws-cdk-lib/aws-route53";
import { WafHttpApi } from "../src/index";

describe("WafHttpApi - CloudFormation Template Structure", () => {
  let app: App;
  let stack: Stack;
  let httpApi: HttpApi;

  beforeEach(() => {
    app = new App();
    stack = new Stack(app, "TestStack");
    httpApi = new HttpApi(stack, "TestApi");
  });

  test("should generate valid CloudFormation template without custom domain", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
    });

    const template = Template.fromStack(stack);

    // Verify core resources are created
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);

    // Verify no domain-related resources are created
    template.resourceCountIs("AWS::CertificateManager::Certificate", 0);
    template.resourceCountIs("AWS::Route53::RecordSet", 0);
  });

  test("should generate valid CloudFormation template with custom domain", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });

    const template = Template.fromStack(stack);

    // Verify core resources are created
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);

    // Verify domain-related resources are created
    template.resourceCountIs("AWS::CertificateManager::Certificate", 1);

    // Verify no Route 53 records without hosted zone
    template.resourceCountIs("AWS::Route53::RecordSet", 0);
  });

  test("should generate valid CloudFormation template with hosted zone", () => {
    const hostedZone = route53.HostedZone.fromHostedZoneAttributes(
      stack,
      "TestZone",
      {
        hostedZoneId: "Z1234567890ABC",
        zoneName: "example.com",
      },
    );

    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
      hostedZone,
    });

    const template = Template.fromStack(stack);

    // Verify all resources are created
    template.resourceCountIs("AWS::CloudFront::Distribution", 1);
    template.resourceCountIs("AWS::WAFv2::WebACL", 1);
    template.resourceCountIs("AWS::CertificateManager::Certificate", 1);
    template.resourceCountIs("AWS::Route53::RecordSet", 2); // A and AAAA records
  });

  test("should maintain resource naming consistency", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });

    const template = Template.fromStack(stack);

    // Verify resource logical IDs follow expected patterns
    const resources = template.findResources("AWS::CloudFront::Distribution");
    const distributionLogicalId = Object.keys(resources)[0];
    expect(distributionLogicalId).toMatch(/TestWafApi.*ApiDistribution/);

    const webAcls = template.findResources("AWS::WAFv2::WebACL");
    const webAclLogicalId = Object.keys(webAcls)[0];
    expect(webAclLogicalId).toMatch(/TestWafApi.*WebAcl/);

    const certificates = template.findResources(
      "AWS::CertificateManager::Certificate",
    );
    const certificateLogicalId = Object.keys(certificates)[0];
    expect(certificateLogicalId).toMatch(/TestWafApi.*AutoGeneratedCert/);
  });

  test("should have correct resource dependencies", () => {
    new WafHttpApi(stack, "TestWafApi", {
      httpApi,
      domain: "api.example.com",
    });

    const template = Template.fromStack(stack);

    // Verify CloudFront distribution references the WebACL
    const distributions = template.findResources(
      "AWS::CloudFront::Distribution",
    );
    const distribution = Object.values(distributions)[0];

    expect(distribution.Properties.DistributionConfig.WebACLId).toBeDefined();

    // Verify the WebACL reference is correct
    const webAcls = template.findResources("AWS::WAFv2::WebACL");
    const webAclLogicalId = Object.keys(webAcls)[0];

    expect(distribution.Properties.DistributionConfig.WebACLId).toEqual({
      "Fn::GetAtt": [webAclLogicalId, "Arn"],
    });

    // Verify CloudFront distribution references the certificate
    expect(
      distribution.Properties.DistributionConfig.ViewerCertificate
        .AcmCertificateArn,
    ).toBeDefined();

    const certificates = template.findResources(
      "AWS::CertificateManager::Certificate",
    );
    const certificateLogicalId = Object.keys(certificates)[0];

    expect(
      distribution.Properties.DistributionConfig.ViewerCertificate
        .AcmCertificateArn,
    ).toEqual({
      Ref: certificateLogicalId,
    });
  });
});
